-- Template ISPL file
 Agent  Environment 

   Obsvars :
   outS1: { empty,   sixfalse,   EtAmaintenantA24A12,   hejAAA12,   hejhi,   ciaohej };
   outI1: -2..2;
   outB1: boolean;
   shape: { empty,   S1,   I1,   B1 };

   end   Obsvars 

   Vars :
   i: -2..2;
   k: -2..2;
   b: boolean;
   
   state: { Init, V0, V1, V2, V3, V4, V5, V6, V7, V8, V9 };
   end   Vars 

   Actions = { Init, gotoV0, gotoV1, gotoV2, gotoV3, gotoV4, gotoV5, gotoV6, gotoV7, gotoV8, gotoV9 };

   Protocol :
    ( true)  and state =  Init : { gotoV0 };
    ( true)  and state =  V0 : { gotoV1 };
    ( true)  and state =  V1 : { gotoV2 };
    ( true)  and state =  V2 : { gotoV3 };
    ( true)  and state =  V3 : { gotoV4 };
    ( true)  and state =  V4 : { gotoV5 };
    ( true)  and state =  V5 : { gotoV6 };
    ( true)  and state =  V6 : { gotoV7 };
    ( true)  and state =  V7 : { gotoV8 };
    ( true)  and state =  V8 : { gotoV9 };

   end   Protocol 
   Evolution :
    outS1 = ciaohej and shape = S1  and state =  V0 if Action = gotoV0;
    outI1 = 3 and shape = I1  and state =  V1 if Action = gotoV1;
    outB1 = b and shape = B1  and state =  V2 if Action = gotoV2;
    outI1 = i + k and shape = I1  and state =  V3 if Action = gotoV3;
    outS1 = sixfalse and shape = S1  and state =  V4 if Action = gotoV4;
    outI1 = i + 3 and shape = I1  and state =  V5 if Action = gotoV5;
    outS1 = hejhi and shape = S1  and state =  V6 if Action = gotoV6;
    outI1 = i + 3 and shape = I1  and state =  V7 if Action = gotoV7;
    outS1 = hejAAA12 and shape = S1  and state =  V8 if Action = gotoV8;
    outS1 = EtAmaintenantA24A12 and shape = S1  and state =  V9 if Action = gotoV9;

   end   Evolution 
 end Agent 


 Agent  Attacker 

   Vars :
   nstep: 0..100; 
    
   obsI1L2: -2..2;
   obsS1L1: { empty,   sixfalse,   EtAmaintenantA24A12,   hejAAA12,   hejhi,   ciaohej };
   obsI1L4: -2..2;
   obsI1L8: -2..2;
   obsS1L7: { empty,   sixfalse,   EtAmaintenantA24A12,   hejAAA12,   hejhi,   ciaohej };
   obsS1L9: { empty,   sixfalse,   EtAmaintenantA24A12,   hejAAA12,   hejhi,   ciaohej };
   obsI1L6: -2..2;
   obsS1L5: { empty,   sixfalse,   EtAmaintenantA24A12,   hejAAA12,   hejhi,   ciaohej };
   obsS1L10: { empty,   sixfalse,   EtAmaintenantA24A12,   hejAAA12,   hejhi,   ciaohej };
   obsB1L3: boolean;
   obsShapeL4: { empty,   S1,   I1,   B1 };
   obsShapeL3: { empty,   S1,   I1,   B1 };
   obsShapeL6: { empty,   S1,   I1,   B1 };
   obsShapeL5: { empty,   S1,   I1,   B1 };
   obsShapeL8: { empty,   S1,   I1,   B1 };
   obsShapeL7: { empty,   S1,   I1,   B1 };
   obsShapeL9: { empty,   S1,   I1,   B1 };
   obsShapeL10: { empty,   S1,   I1,   B1 };
   obsShapeL2: { empty,   S1,   I1,   B1 };
   obsShapeL1: { empty,   S1,   I1,   B1 };


   end   Vars 

   Actions = {none};

   Protocol :
    Other: {none};
   end   Protocol 

   Evolution :
    (nstep = nstep + 1) if nstep < 1;
    obsS1L1 = Environment.outS1 and obsShapeL1 = Environment.shape and  (nstep = nstep + 1) if nstep = 1;
    obsI1L2 = Environment.outI1 and obsShapeL2 = Environment.shape and  (nstep = nstep + 1) if nstep = 2;
    obsB1L3 = Environment.outB1 and obsShapeL3 = Environment.shape and  (nstep = nstep + 1) if nstep = 3;
    obsI1L4 = Environment.outI1 and obsShapeL4 = Environment.shape and  (nstep = nstep + 1) if nstep = 4;
    obsS1L5 = Environment.outS1 and obsShapeL5 = Environment.shape and  (nstep = nstep + 1) if nstep = 5;
    obsI1L6 = Environment.outI1 and obsShapeL6 = Environment.shape and  (nstep = nstep + 1) if nstep = 6;
    obsS1L7 = Environment.outS1 and obsShapeL7 = Environment.shape and  (nstep = nstep + 1) if nstep = 7;
    obsI1L8 = Environment.outI1 and obsShapeL8 = Environment.shape and  (nstep = nstep + 1) if nstep = 8;
    obsS1L9 = Environment.outS1 and obsShapeL9 = Environment.shape and  (nstep = nstep + 1) if nstep = 9;
    obsS1L10 = Environment.outS1 and obsShapeL10 = Environment.shape and  (nstep = nstep + 1) if nstep = 10;
    
   end   Evolution 
 end Agent 

 Evaluation 
  eot if Environment.state=Environment.state;
  i0 if Environment.i=-2;
  i1 if Environment.i=-1;
  i2 if Environment.i=0;
  i3 if Environment.i=1;
  i4 if Environment.i=2;
  k0 if Environment.k=-2;
  k1 if Environment.k=-1;
  k2 if Environment.k=0;
  k3 if Environment.k=1;
  k4 if Environment.k=2;
  bT if Environment.b=true;
  bF if Environment.b=false;

 end Evaluation


 InitStates 
  Environment.state = Init and Environment.shape = empty and Attacker.nstep = 0 and Attacker.obsShapeL1 = empty and Environment.outS1 = empty and Attacker.obsS1L1 = empty and Attacker.obsShapeL2 = empty and Environment.outI1 = 0 and Attacker.obsI1L2 = 0 and Attacker.obsShapeL3 = empty and Environment.outB1 = true and Attacker.obsB1L3 = true and Attacker.obsShapeL4 = empty and Environment.outI1 = 0 and Attacker.obsI1L4 = 0 and Attacker.obsShapeL5 = empty and Environment.outS1 = empty and Attacker.obsS1L5 = empty and Attacker.obsShapeL6 = empty and Environment.outI1 = 0 and Attacker.obsI1L6 = 0 and Attacker.obsShapeL7 = empty and Environment.outS1 = empty and Attacker.obsS1L7 = empty and Attacker.obsShapeL8 = empty and Environment.outI1 = 0 and Attacker.obsI1L8 = 0 and Attacker.obsShapeL9 = empty and Environment.outS1 = empty and Attacker.obsS1L9 = empty and Attacker.obsShapeL10 = empty and Environment.outS1 = empty and Attacker.obsS1L10 = empty ;
 end InitStates 

 Formulae 
  AG(((bF and bT) -> !K(Attacker,!((bF and bT) and (k1 and kT)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k1 and kF)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k3 and kF)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k3 and kT)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k0 and kT)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k0 and kF)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k4 and kF)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k4 and kT)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k2 and kF)))) and ((bF and bT) -> !K(Attacker,!((bF and bT) and (k2 and kT)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k4 and kF)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k4 and kT)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k3 and kF)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k3 and kT)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k0 and kT)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k0 and kF)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k2 and kT)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k2 and kF)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k1 and kF)))) and ((bT and bT) -> !K(Attacker,!((bT and bT) and (k1 and kT)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k2 and kF)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k2 and kT)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k1 and kF)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k1 and kT)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k4 and kF)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k4 and kT)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k0 and kF)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k0 and kT)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k3 and kT)))) and ((bF and bF) -> !K(Attacker,!((bF and bF) and (k3 and kF)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k3 and kT)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k3 and kF)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k1 and kT)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k1 and kF)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k4 and kF)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k4 and kT)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k0 and kT)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k0 and kF)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k2 and kT)))) and ((bT and bF) -> !K(Attacker,!((bT and bF) and (k2 and kF)))) and  eot);
 end Formulae 

