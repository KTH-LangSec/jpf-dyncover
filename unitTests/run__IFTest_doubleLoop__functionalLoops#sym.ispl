-- Template ISPL file
 Agent  Environment 

   Obsvars :
   outI1: -2..2;
   shape: { empty,   I1 };

   end   Obsvars 

   Vars :
   secret: -2..2;
   
   state: { Init, V0, V7, V4, V2, V6, V1, V8, V5, V3 };
   end   Vars 

   Actions = { Init, gotoV0, gotoV7, gotoV4, gotoV2, gotoV6, gotoV1, gotoV8, gotoV5, gotoV3 };

   Protocol :
    ( secret < 0)  and state =  Init : { gotoV0 };
    ( 2 - secret > 0 and secret <= 0 and secret <= 2 and secret >= 0)  and state =  Init : { gotoV7 };
    ( secret > 0 and secret <= 2 and secret >= 0)  and state =  Init : { gotoV4 };
    ( secret > 2 and secret >= 0)  and state =  Init : { gotoV2 };
    ( 2 - secret > 0 and secret - 1 <= 0 and secret > 0 and secret <= 2 and secret >= 0)  and state =  V4 : { gotoV6 };
    ( secret < 0)  and state =  V0 : { gotoV1 };
    ( (2 - secret) - 1 > 0 and 2 - secret > 0 and secret <= 0 and secret <= 2 and secret >= 0)  and state =  V7 : { gotoV8 };
    ( secret - 1 > 0 and secret > 0 and secret <= 2 and secret >= 0)  and state =  V4 : { gotoV5 };
    ( secret > 2 and secret >= 0)  and state =  V2 : { gotoV3 };

   end   Protocol 
   Evolution :
    outI1 = 0 and shape = I1  and state =  V0 if Action = gotoV0;
    outI1 = secret and shape = I1  and state =  V7 if Action = gotoV7;
    outI1 = 0 and shape = I1  and state =  V4 if Action = gotoV4;
    outI1 = 0 and shape = I1  and state =  V2 if Action = gotoV2;
    outI1 = secret and shape = I1  and state =  V6 if Action = gotoV6;
    outI1 = 1 and shape = I1  and state =  V1 if Action = gotoV1;
    outI1 = secret + 1 and shape = I1  and state =  V8 if Action = gotoV8;
    outI1 = 1 and shape = I1  and state =  V5 if Action = gotoV5;
    outI1 = 1 and shape = I1  and state =  V3 if Action = gotoV3;

   end   Evolution 
 end Agent 


 Agent  Attacker 

   Vars :
   nstep: 0..100; 
    
   obsI1L1: -2..2;
   obsI1L2: -2..2;
   obsShapeL2: { empty,   I1 };
   obsShapeL1: { empty,   I1 };


   end   Vars 

   Actions = {none};

   Protocol :
    Other: {none};
   end   Protocol 

   Evolution :
    (nstep = nstep + 1) if nstep < 1;
    obsI1L1 = Environment.outI1 and obsShapeL1 = Environment.shape and  (nstep = nstep + 1) if nstep = 1;
    obsI1L2 = Environment.outI1 and obsShapeL2 = Environment.shape and  (nstep = nstep + 1) if nstep = 2;
    
   end   Evolution 
 end Agent 

 Evaluation 
  eot if Environment.state=Environment.state;
  secret0 if Environment.secret=-2;
  secret1 if Environment.secret=-1;
  secret2 if Environment.secret=0;
  secret3 if Environment.secret=1;
  secret4 if Environment.secret=2;

 end Evaluation


 InitStates 
  Environment.state = Init and Environment.shape = empty and Attacker.nstep = 0 and Attacker.obsShapeL1 = empty and Environment.outI1 = 0 and Attacker.obsI1L1 = 0 and Environment.outI1 = 0 and Attacker.obsI1L1 = 0 and Environment.outI1 = 0 and Attacker.obsI1L1 = 0 and Environment.outI1 = 0 and Attacker.obsI1L1 = 0 and Attacker.obsShapeL2 = empty and Environment.outI1 = 0 and Attacker.obsI1L2 = 0 and Environment.outI1 = 0 and Attacker.obsI1L2 = 0 and Environment.outI1 = 0 and Attacker.obsI1L2 = 0 and Environment.outI1 = 0 and Attacker.obsI1L2 = 0 and Environment.outI1 = 0 and Attacker.obsI1L2 = 0 ;
 end InitStates 

 Formulae 
  AG(!K(Attacker,!(secret1 and secretF)) and !K(Attacker,!(secret1 and secretT)) and !K(Attacker,!(secret2 and secretT)) and !K(Attacker,!(secret2 and secretF)) and !K(Attacker,!(secret4 and secretF)) and !K(Attacker,!(secret4 and secretT)) and !K(Attacker,!(secret3 and secretF)) and !K(Attacker,!(secret3 and secretT)) and !K(Attacker,!(secret0 and secretT)) and !K(Attacker,!(secret0 and secretF)) and  eot);
 end Formulae 

