-- Template ISPL file
 Agent  Environment 

   Obsvars :
   outS1: { empty,   AfterAtheAtestAonAhA,   BeforeAtheAtestAonAhA };
   outI1: -2..2;
   outB1: boolean;
   shape: { empty,   S1,   I1,   B1 };

   end   Obsvars 

   Vars :
   h: -2..2;
   
   state: { Init, V0, V3, V1, V2, V4 };
   end   Vars 

   Actions = { Init, gotoV0, gotoV3, gotoV1, gotoV2, gotoV4 };

   Protocol :
    ( true)  and state =  Init : { gotoV0 };
    ( h = 0)  and state =  V0 : { gotoV3 };
    ( !(h = 0))  and state =  V0 : { gotoV1 };
    ( !(h = 0))  and state =  V1 : { gotoV2 };
    ( h = 0)  and state =  V3 : { gotoV4 };

   end   Protocol 
   Evolution :
    outS1 = BeforeAtheAtestAonAhA and shape = S1  and state =  V0 if Action = gotoV0;
    outB1 = true and shape = B1  and state =  V3 if Action = gotoV3;
    outI1 = h and shape = I1  and state =  V1 if Action = gotoV1;
    outS1 = AfterAtheAtestAonAhA and shape = S1  and state =  V2 if Action = gotoV2;
    outS1 = AfterAtheAtestAonAhA and shape = S1  and state =  V4 if Action = gotoV4;

   end   Evolution 
 end Agent 


 Agent  Attacker 

   Vars :
   nstep: 0..100; 
    
   obsI1L2: -2..2;
   obsS1L1: { empty,   AfterAtheAtestAonAhA,   BeforeAtheAtestAonAhA };
   obsS1L3: { empty,   AfterAtheAtestAonAhA,   BeforeAtheAtestAonAhA };
   obsB1L2: boolean;
   obsShapeL3: { empty,   S1,   I1,   B1 };
   obsShapeL2: { empty,   S1,   I1,   B1 };
   obsShapeL1: { empty,   S1,   I1,   B1 };


   end   Vars 

   Actions = {none};

   Protocol :
    Other: {none};
   end   Protocol 

   Evolution :
    (nstep = nstep + 1) if nstep < 1;
    obsS1L1 = Environment.outS1 and obsShapeL1 = Environment.shape and  (nstep = nstep + 1) if nstep = 1;
    obsI1L2 = Environment.outI1 and obsB1L2 = Environment.outB1 and obsShapeL2 = Environment.shape and  (nstep = nstep + 1) if nstep = 2;
    obsS1L3 = Environment.outS1 and obsShapeL3 = Environment.shape and  (nstep = nstep + 1) if nstep = 3;
    
   end   Evolution 
 end Agent 

 Evaluation 
  eot if Environment.state=Environment.state;
  h0 if Environment.h=-2;
  h1 if Environment.h=-1;
  h2 if Environment.h=0;
  h3 if Environment.h=1;
  h4 if Environment.h=2;

 end Evaluation


 InitStates 
  Environment.state = Init and Environment.shape = empty and Attacker.nstep = 0 and Attacker.obsShapeL1 = empty and Environment.outS1 = empty and Attacker.obsS1L1 = empty and Attacker.obsShapeL2 = empty and Environment.outB1 = true and Attacker.obsB1L2 = true and Environment.outI1 = 0 and Attacker.obsI1L2 = 0 and Attacker.obsShapeL3 = empty and Environment.outS1 = empty and Attacker.obsS1L3 = empty and Environment.outS1 = empty and Attacker.obsS1L3 = empty ;
 end InitStates 

 Formulae 
  AG(!K(Attacker,!(h0 and hT)) and !K(Attacker,!(h0 and hF)) and !K(Attacker,!(h3 and hT)) and !K(Attacker,!(h3 and hF)) and !K(Attacker,!(h1 and hF)) and !K(Attacker,!(h1 and hT)) and !K(Attacker,!(h4 and hT)) and !K(Attacker,!(h4 and hF)) and !K(Attacker,!(h2 and hF)) and !K(Attacker,!(h2 and hT)) and  eot);
 end Formulae 

