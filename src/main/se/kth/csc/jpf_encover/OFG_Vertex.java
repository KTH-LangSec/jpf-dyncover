/*
 * Copyright (C) 2012 Gurvan Le Guernic
 * 
 * This file is part of ENCoVer. ENCoVer is a JavaPathFinder extension allowing
 * to verify if a Java method respects different epistemic noninterference
 * properties.
 * 
 * ENCoVer is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * ENCoVer is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * ENCoVer. If not, see <http://www.gnu.org/licenses/>.
 */


package se.kth.csc.jpf_encover;


/**
 * This is the interface for the data structures representing OFG vertices.
 *
 * @see OutputFlowGraph
 * 
 * @author Gurvan Le Guernic
 * @version 0.1
 */
public interface OFG_Vertex {

  /**
   * Retrieves the unique ID of this vertex.
   *
   * @return The unique ID of this vertex.
   */
  public String getId();

  /**
   * Retrieves the output generated by this vertex.
   *
   * @return The output.
   */
  public EExpression getOutput();

  /**
   * Retrieve the path condition to reach this vertex.
   *
   * @return The path condition.
   */
  public EFormula getPathCondition();
  
  /**
   * Retrieves a conjunction of the properties (except path-elated properties)
   * that hold at this vertex.
   *
   * @return Properties holding.
   */
  public EFormula getOtherProperties();
  
  /**
   * Sets the output generated by this vertex.
   *
   * @param exp Expression representing the ouptut.
   */
  public void setOutput(EExpression exp);
  
  /**
   * Sets the path condition to reach this vertex.
   *
   * @param path The path condition for this vertex.
   */
  public void setPathCondition(EFormula path);
  
  /**
   * Sets the properties (except path-elated properties) that hold at this vertex.
   *
   * @param prop The properties holding at this vertex.
   */
  public void setOtherProperties(EFormula prop);
  
  /**
   * Retrieves a textual description of this vertex.
   *
   * @return A textual description of this vertex.
   */
  public String getTextualDescription();

  /**
   * Retrieves a short String identifying and describing this vertex.
   *
   * @return Short string identifying this vertex.
   */
  public String toString();
}



// Local Variables: 
// c-basic-offset: 2
// indent-tabs-mode: nil
// End:
