/* Generated By:JavaCC: Do not edit this line. Smt2Parser.java */
  package se.kth.csc.jpf_encover;

  import java.io.*;
  import java.util.*;
  import java.util.regex.*;

  /**
   * This class implements a parser for SMT2.
   * 
   * @author Gurvan Le Guernic
   * @version 0.1
   */
  public class Smt2Parser implements Smt2ParserConstants {

    private static final String REGEXP_TRUE = "true|t";
    private static final String REGEXP_FALSE = "false|f";

    private static boolean initialized = false;
    private static Map<String,EE_Variable> pseudonym2variable = null;

    /**
     * Initializes the parser after class loading. To be called only once. If
     * called more than once, it does not do anything.
     */
    public static void initialize() {
      if (!initialized) new Smt2Parser(new StringReader(""));
      initialized = true;
    }

    /**
     * Parses the SMT2 string provided using the mapping from pseudonym to
     * variables also provided. If this mapping is {@code null}, then it relies
     * on the mapping to existing variables provided by EE_Variable.
     *
     * @param str The SMT2 streing to parse.
     * @param pseudo2var The mapping from pseudonym to EE_Variable to use.
     * @return The EExpression corresponding to {@code str}.
     */
    public static EExpression parse(String str, Map<String,EE_Variable> pseudo2var) throws ParseException {
      if (!initialized) initialize();
      pseudonym2variable = pseudo2var;
      Smt2Parser.ReInit(new StringReader(str));
      return Smt2Parser.start();
    }

    /**
     * Retrieves a variable from its pseudonym. If a mapping has been provided
     * when calling {@link parse(String, Map<String,EE_Variable>)}, then it uses
     * it. Otherwise, it relies on the mapping to existing variables provided by
     * EE_Variable. In any way, if this pseudonym is unknown, then it creates a
     * new variable with an unknown type.
     *
     * @param pseudo The pseudonym of the EE_Variable to retrieve.
     * @return The EE_Variable with this pseudonym.
     */
    private static EE_Variable getVarWithPseudo(String pseudo) {
      EE_Variable res;
      if ( pseudonym2variable != null ) {
        res = pseudonym2variable.get(pseudo);
      } else {
        try { res = EE_Variable.getExistingVariableWithPseudonym(pseudo); }
        catch(Error e) { res = null; }
      }
      if ( res == null ) res = new EE_Variable(EExpression.Type.UNKNOWN, pseudo);
      return res;
    }

    /**
     * Transforms a {@link String} to the corresponding {@link Boolean} if the
     * string is correspond to the regular expression "{@value #REGEXP_TRUE}" or
     * "{@value #REGEXP_FALSE}". Otherwise, it throws an exception.
     *
     * @param str The String to parse.
     * @return The Boolean corresponding to str.
     */
    private static Boolean decodeBoolean(String str) throws Exception {
      Pattern pattern_true = Pattern.compile(REGEXP_TRUE, Pattern.CASE_INSENSITIVE);
      Pattern pattern_false = Pattern.compile(REGEXP_FALSE, Pattern.CASE_INSENSITIVE);
      if ( pattern_true.matcher(str).matches() ) {
        return Boolean.TRUE;
      } else if ( pattern_false.matcher(str).matches() ) {
        return Boolean.FALSE;
      } else {
        throw new Exception("'" + str + "' is not a boolean.");
      }
    }

    /**
     * Local testing method.
     */
    public static void main(String[] args) throws ParseException, TokenMgrError {
      String test1 = "(not (or (<= x 0) (<= x -2.86)))";
      System.out.println(test1 + " -> " + Smt2Parser.parse(test1, null));
      String test2 = "(let (($x35 (<= x -1))) (not $x35))";
      System.out.println(test2 + " -> " + Smt2Parser.parse(test2, null));
      String test3 = "(not (or (= b True) f))";
      System.out.println(test3 + " -> " + Smt2Parser.parse(test3, null));
    }

  static final public EExpression start() throws ParseException {
  EExpression res;
    res = formula(new HashMap<String,EExpression>());
                                                     {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public EExpression formula(Map<String,EExpression> env) throws ParseException {
  EExpression formula;
    if (jj_2_1(2)) {
      formula = atom(env);
    } else if (jj_2_2(2)) {
      formula = varCall(env);
    } else if (jj_2_3(2)) {
      formula = op(env);
    } else if (jj_2_4(2)) {
      formula = let(env);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  static final public EExpression atom(Map<String,EExpression> env) throws ParseException {
  Token a;
  EExpression.Type t;
  Object value = null;
  EExpression res;
    if (jj_2_8(2)) {
      if (jj_2_5(2)) {
        a = jj_consume_token(BOOL);
      t = EExpression.Type.BOOL;
      try { value = decodeBoolean(a.toString()); }
      catch(Exception e) { {if (true) throw new Error(e);} }
      } else if (jj_2_6(2)) {
        a = jj_consume_token(INT);
      t = EExpression.Type.INT;
      try { value = new Integer(a.toString().replaceAll("[() ]", "")); }
      catch(NumberFormatException e) { {if (true) throw new Error(e);} }
      } else if (jj_2_7(2)) {
        a = jj_consume_token(REAL);
      t = EExpression.Type.REAL;
      try { value = new Double(a.toString().replaceAll("[() ]", "")); }
      catch(NumberFormatException e) { {if (true) throw new Error(e);} }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
     res = new EE_Constant(t, value);
    } else if (jj_2_9(2)) {
      a = jj_consume_token(STR);
     String vPseudo = a.toString();
     res = getVarWithPseudo(vPseudo);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public EExpression varCall(Map<String,EExpression> env) throws ParseException {
  Token v;
    v = jj_consume_token(VAR);
    String vName = v.toString();
    if (env.containsKey(vName)) {
      {if (true) return env.get(vName);}
    } else {
      {if (true) throw new Error("Usage of unbounded variable " + vName);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public EExpression op(Map<String,EExpression> env) throws ParseException {
  Token  op;
  EExpression arg;
  List<EExpression> fmlArgs = new ArrayList();
    jj_consume_token(L_PAR);
    op = jj_consume_token(STR);
    label_1:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_1;
      }
      arg = formula(env);
                                            fmlArgs.add(arg);
    }
    jj_consume_token(R_PAR);
      String opStr = op.toString();
      int nbArgs = fmlArgs.size();
      EE_Operation eop = EExpression.getInstanceOf(EFormula.StrEncoding.SMT2, opStr);
      if (eop instanceof EE_UnaryOperation) {
        if ( nbArgs != 1) {if (true) throw new Error("Parsing an SMT2 operation with the wrong number of operands: " + opStr);}
        ((EE_UnaryOperation) eop).setOperand(fmlArgs.get(0));
      }
      if (eop instanceof EE_BinaryOperation) {
        if ( nbArgs != 2) {if (true) throw new Error("Parsing an SMT2 operation with the wrong number of operands: " + opStr);}
        ((EE_BinaryOperation) eop).setLeftHandSide(fmlArgs.get(0));
        ((EE_BinaryOperation) eop).setRightHandSide(fmlArgs.get(1));
      }
      if (eop instanceof EE_TernaryOperation) {
        if ( nbArgs != 3) {if (true) throw new Error("Parsing an SMT2 operation with the wrong number of operands: " + opStr);}
        ((EE_TernaryOperation) eop).setOperand1(fmlArgs.get(0));
        ((EE_TernaryOperation) eop).setOperand2(fmlArgs.get(1));
        ((EE_TernaryOperation) eop).setOperand3(fmlArgs.get(2));
      }
      if (eop instanceof EE_NaryOperation) {
        ((EE_NaryOperation) eop).addOperands(fmlArgs);
      }
      {if (true) return eop;}
    throw new Error("Missing return statement in function");
  }

  static final public EExpression let(Map<String,EExpression> env) throws ParseException {
  Token v;
  String vName;
  EExpression fmlDef;
  EExpression fmlIn;
    jj_consume_token(L_PAR);
    jj_consume_token(LET);
    jj_consume_token(L_PAR);
    label_2:
    while (true) {
      jj_consume_token(L_PAR);
      v = jj_consume_token(VAR);
                    vName = v.toString();
      fmlDef = formula(env);
      jj_consume_token(R_PAR);
                  env.put(vName, fmlDef);
      if (jj_2_11(2)) {
        ;
      } else {
        break label_2;
      }
    }
    jj_consume_token(R_PAR);
    fmlIn = formula(env);
    jj_consume_token(R_PAR);
      {if (true) return fmlIn;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(L_PAR)) return true;
    if (jj_scan_token(LET)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(L_PAR)) return true;
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(L_PAR)) return true;
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Smt2ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[11];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Smt2Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Smt2Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Smt2ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Smt2Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Smt2ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Smt2Parser(Smt2ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Smt2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
